@model GS247.Models.Teachers.GradeList
@{
    ViewBag.Title = "ManageGrade";
    Layout = "~/Views/Shared/_TeachersLayout.cshtml";
}
<style>
    .a_tag-btn {
        background: #50d8af;
    }
</style>
<div class="cont_right formWrapper">
    <h1>Manage Teacher Grades</h1>

    <div class="button-bg">
        <div class="top-hed-btn-left">
            <div id='buttons'></div>
        </div>
        <div class="top-hed-btn-right">
            <ul>
                <li> <a class="a_tag-btn " href="@Url.Action("AddGrade","Teachers")"><span>Add Grade</span></a></li>
            </ul>
        </div>
    </div>
    <div id="employee-categories-grid" class="grid-view">
        <table class="items" id="myTable">
            <thead>
                <tr>
                    <th id="employee-categories-grid_c0" onclick="sortTable(0);">Name</th>
                    <th id="employee-categories-grid_c1" onclick="sortTable(1);">Max Hours Day</th>
                    <th id="employee-categories-grid_c1" onclick="sortTable(2);">Max Hours Week</th>
                    <th style="font-size: 12px; font-weight: bold;" id="employee-categories-grid_c2">Action</th>
                </tr>
                <tr class="filters">
                    <td><input onkeyup="Search(this.id,0)" id="Category_Name" name="EmployeeCategories[name]" type="text" maxlength="25" value="" /></td>
                    <td><input onkeyup="Search(this.id,1)" id="Prefix_Name" name="EmployeeCategories[prefix]" type="text" maxlength="25" value="" /></td>
                    <td><input onkeyup="Search(this.id,2)" id="Max_Hours" name="EmployeeCategories[prefix]" type="text" maxlength="25" value="" /></td>
                    <td>&nbsp;</td>
                </tr>
            </thead>
            <tbody>
                @for (int i = 0; i < Model.Grades.Count; i++)
                {
                <tr class="odd" id="row@(i+1)">
                    <td id="data1">@Model.Grades[i].Name</td>
                    <td id="data2">@Model.Grades[i].MaxHoursDay</td>
                    <td id="data2">@Model.Grades[i].MaxHoursWeek</td>
                    <td class="button-column"><a class="update" title="Update" href="@Url.Action("UpdateGrade","Teachers")?Id=@Model.Grades[i].Id"><img src="../gridview/update.png" alt="Update" /></a><a class="delete" title="Delete" onclick="return confirm('Are you sure you want to delete this item?')" href="@Url.Action("DeleteGrade","Teachers")?Id=@Model.Grades[i].Id"><img src="../gridview/delete.png" alt="Delete" /></a></td>
                </tr>
                }
            </tbody>
        </table>
        <div class="keys" style="display:none" title="/open-school-CE-master/index.php?r=employees/employeeCategories/admin"><span>1</span></div>
    </div>
</div>
<script>

    /*var $table = document.getElementById("myTable");
    var $nrows = 3,
        $rowCount = $table.rows.length,
        $tr = [],
        $th = $table.rows[0].outerHTML + $table.rows[1].outerHTML;
    var $pageCount = Math.ceil(($rowCount - 2) / $nrows);
    if ($pageCount > 1) {
        for ($i = 2, $ii = 0; $i < $rowCount; $i++, $ii++) {
            $tr[$ii] = $table.rows[$i].outerHTML;

        }
        sort(2);
    }


    function sort($p) {
        var $rows = $th;
        var $s = (($nrows * $p) - $nrows);
        for ($i = $s; $i < ($s + $nrows) && $i < $tr.length; $i++) {
            $rows += $tr[$i];
        }

        $table.innerHTML = $rows;
        document.getElementById("buttons").innerHTML = pageButtons($pageCount, $p);
        document.getElementById("id" + $p).setAttribute("class", "active");
    }
    function pageButtons($pCount, $cur) {
        var $prevDis = ($cur == 1) ? "disabled" : "",
            $nextDis = ($cur == $pCount) ? "disabled" : "",
            $buttons = "<input type='button' value='&lt;&lt; Prev' onclick='sort(" + ($cur - 1) + ")'" + $prevDis + ">";
        for ($i = 1; $i <= $pCount; $i++) {
            $buttons += "<input type='button' id='id" + $i + "' value='" + $i + "' onclick='sort(" + $i + ")'>";
        }
        $buttons += "<input type='button' value='Next &gt;&gt;' onclick='sort(" + ($cur + 1) + ")'" + $nextDis + ">";
        return $buttons;

    }*/
    defaultLoad ();
    function defaultLoad() {
        $lastPage = 0;
        loadPage($lastPage);

    }
    function loadPage(page) {
        var table = document.getElementById("myTable"),
            totstart = 2,
            totend = table.rows.length,
            nrows = 5,
            pages = Math.ceil((totend - totstart) / nrows);
        if ((page < 0) || (page >= pages)) {
            return;
        }
        var start = totstart + (page * nrows);
        var end = totstart + ((page * nrows) + nrows-1);
        for (var i = totstart; i < totend; i++) {
           if ((i >= start) && (i <= end)) {
               table.rows[i].style.display = "";
                //document.getElementById("row" + i).style.display = "";
            }
           else {
               table.rows[i].style.display = "none";
                //document.getElementById("row" + i).style.display = "none";
            }


        }
        document.getElementById("buttons").innerHTML = pageButtons(pages, page);
        document.getElementById("id" + (page + 1)).style.color = "#50d8af";
        $lastPage = page;
    }
    function pageButtons(pCount, cur) {

        buttons = "<input type='button' value='&lt;&lt; Prev' onclick='loadPage(" + (cur - 1) +");'>";
        for (var i = 1; i <= pCount; i++) {
            buttons += "<input type='button' id='id" + i + "' value='" + i + "' onclick='loadPage(" + (i - 1) + ");'>";
        }
        buttons += "<input type='button' value='Next &gt;&gt;' onclick='loadPage(" + (cur + 1) +");'>";
        return buttons;

    }
    function sortTable(n) {
        var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
        table = document.getElementById("myTable");
        switching = true;
        // Set the sorting direction to ascending:
        dir = "asc";
        /* Make a loop that will continue until
        no switching has been done: */
        while (switching) {
            // Start by saying: no switching is done:
            switching = false;
            rows = table.rows;
            /* Loop through all table rows (except the
            first, which contains table headers): */
            for (i = 2; i < (rows.length - 1); i++) {
                // Start by saying there should be no switching:
                shouldSwitch = false;
                /* Get the two elements you want to compare,
                one from current row and one from the next: */
                x = rows[i].getElementsByTagName("TD")[n];
                y = rows[i + 1].getElementsByTagName("TD")[n];
                /* Check if the two rows should switch place,
                based on the direction, asc or desc: */
                if (dir == "asc") {
                    if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {
                        // If so, mark as a switch and break the loop:
                        shouldSwitch = true;
                        break;
                    }

                } else if (dir == "desc") {
                    if (x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase()) {
                        // If so, mark as a switch and break the loop:
                        shouldSwitch = true;
                        break;
                    }
                }
            }
            if (shouldSwitch) {
                /* If a switch has been marked, make the switch
                and mark that a switch has been done: */
                rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
                switching = true;
                // Each time a switch is done, increase this count by 1:
                switchcount++;
            } else {
                /* If no switching has been done AND the direction is "asc",
                set the direction to "desc" and run the while loop again. */
                if (switchcount == 0 && dir == "asc") {
                    dir = "desc";
                    switching = true;
                }
            }
        }
        loadPage(0);
    }
    function Search(tmp,inc) {
        // Declare variables
        var input, filter, table, tr, td, i, txtValue;
        input = document.getElementById(tmp);
        if (input.value == '') {
            loadPage($lastPage);
            return;
        }
        filter = input.value.toUpperCase();
        table = document.getElementById("myTable");
        tr = table.getElementsByTagName("tr");

        // Loop through all table rows, and hide those who don't match the search query
        for (i = 2; i < tr.length; i++) {
            td = tr[i].getElementsByTagName("td")[inc];
            if (td) {
                txtValue = td.textContent || td.innerText;
                if (txtValue.toUpperCase().indexOf(filter) > -1) {
                    tr[i].style.display = "";
                } else {
                    tr[i].style.display = "none";
                }
            }
        }
    }
</script>

