@model IEnumerable<GS247.Models.TimeTable.SearchBatchCourse>

@{
    ViewBag.Title = "Search Batch";
    Layout = "~/Views/Shared/_TimeTableLayout.cshtml";
}
    <style>
        .a_tag-btn {
            background: #50d8af;
        }
        .grid-view table.items th {
            color: #0c2e8a;
        }
        #myTable > thead > tr > th, #myTable > tbody > tr > td {
            text-align: center;
        }
    </style>
<script>
    function sortTable(n) {
        var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
        table = document.getElementById("myTable");
        switching = true;
        // Set the sorting direction to ascending:
        dir = "asc";
        /* Make a loop that will continue until
        no switching has been done: */
        while (switching) {
            // Start by saying: no switching is done:
            switching = false;
            rows = table.rows;
            /* Loop through all table rows (except the
            first, which contains table headers): */
            for (i = 2; i < (rows.length - 1); i++) {
                // Start by saying there should be no switching:
                shouldSwitch = false;
                /* Get the two elements you want to compare,
                one from current row and one from the next: */
                x = rows[i].getElementsByTagName("TD")[n];
                y = rows[i + 1].getElementsByTagName("TD")[n];
                /* Check if the two rows should switch place,
                based on the direction, asc or desc: */
                if (dir == "asc") {
                    if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {
                        // If so, mark as a switch and break the loop:
                        shouldSwitch = true;
                        break;
                    }
                } else if (dir == "desc") {
                    if (x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase()) {
                        // If so, mark as a switch and break the loop:
                        shouldSwitch = true;
                        break;
                    }
                }
            }
            if (shouldSwitch) {
                /* If a switch has been marked, make the switch
                and mark that a switch has been done: */
                rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
                switching = true;
                // Each time a switch is done, increase this count by 1:
                switchcount++;
            } else {
                /* If no switching has been done AND the direction is "asc",
                set the direction to "desc" and run the while loop again. */
                if (switchcount == 0 && dir == "asc") {
                    dir = "desc";
                    switching = true;
                }
            }
        }
    }
    function Search(tmp, inc) {
        // Declare variables
        var input, filter, table, tr, td, i, txtValue;
        input = document.getElementById(tmp);
        if (input.value == '') {
            loadPage($lastPage);
            return;
        }
        filter = input.value.toUpperCase();
        table = document.getElementById("myTable");
        tr = table.getElementsByTagName("tr");

        // Loop through all table rows, and hide those who don't match the search query
        for (i = 2; i < tr.length; i++) {
            td = tr[i].getElementsByTagName("td")[inc];
            if (td) {
                txtValue = td.textContent || td.innerText;
                if (txtValue.toUpperCase().indexOf(filter) > -1) {
                    tr[i].style.display = "";
                } else {
                    tr[i].style.display = "none";
                }
            }
        }
    }
</script>

<div>
    <h1>@ViewBag.Title</h1>

    <div class="button-bg">
        <div class="top-hed-btn-left"> </div>
        <div class="top-hed-btn-right">

        </div>

    </div>
    <style>
        .sem-view-block th, td {
            border: none;
        }
    </style>

    <div id="semester-grid" class="grid-view">
        <table class="items" id="myTable">
            <thead>
                <tr>
                    <th id="Driver-grid_c0" onclick="sortTable(0);">Course Name</th>
                    <th id="Driver-grid_c1" onclick="sortTable(1);">Batch Name</th>
                </tr>
                <tr class="filters">
                    <td><input id="myInputCourse" onkeyup="Search(this.id,0);" name="Transport[CourseName]" type="text" maxlength="225" value="" placeholder="Search" /></td>
                    <td><input id="myInputBatch" onkeyup="Search(this.id,1);" name="Transport[BatchName]" type="text" maxlength="225" value="" placeholder="Search" /></td>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model)
                {
                    <tr class="odd" id="@item.BatchId">

                        <td>@Html.HiddenFor(m => item.CourseId) @Html.DisplayFor(Model => item.CourseName)</td>
                        <td>@Html.HiddenFor(m => item.BatchId) @Html.DisplayFor(m => item.BatchName)</td>
                    </tr>
                }

            </tbody>
        </table>
    </div>


        @if (TempData["SearchBatch"] != null)
        {
            <script type="text/javascript">
            alert("@TempData.Peek("SearchBatch").ToString()");
            </script>
        }
    </div>
    <script type="text/javascript">
        $(document).ready(function () {

            $('#myTable tr').dblclick(function () {
                debugger;
                var BatchId = $(this).attr('id');
                window.location.href = "/TimeTable/GetBatch?id=" + BatchId;
            });
        });
    </script>
